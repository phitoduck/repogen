from typing import Any, Dict, Optional, Type, TypeVar

import attr

from ..models.dependabot_alert_package import DependabotAlertPackage
from ..models.dependabot_alert_security_vulnerability_first_patched_version import (
    DependabotAlertSecurityVulnerabilityFirstPatchedVersion,
)
from ..models.dependabot_alert_security_vulnerability_severity import DependabotAlertSecurityVulnerabilitySeverity

T = TypeVar("T", bound="DependabotAlertSecurityVulnerability")


@attr.s(auto_attribs=True)
class DependabotAlertSecurityVulnerability:
    """Details pertaining to one vulnerable version range for the advisory.

    Attributes:
        package (DependabotAlertPackage): Details for the vulnerable package.
        severity (DependabotAlertSecurityVulnerabilitySeverity): The severity of the vulnerability.
        vulnerable_version_range (str): Conditions that identify vulnerable versions of this vulnerability's package.
        first_patched_version (Optional[DependabotAlertSecurityVulnerabilityFirstPatchedVersion]): Details pertaining to
            the package version that patches this vulnerability.
    """

    package: DependabotAlertPackage
    severity: DependabotAlertSecurityVulnerabilitySeverity
    vulnerable_version_range: str
    first_patched_version: Optional[DependabotAlertSecurityVulnerabilityFirstPatchedVersion]

    def to_dict(self) -> Dict[str, Any]:
        package = self.package.to_dict()

        severity = self.severity.value

        vulnerable_version_range = self.vulnerable_version_range
        first_patched_version = self.first_patched_version.to_dict() if self.first_patched_version else None

        field_dict: Dict[str, Any] = {}
        field_dict.update(
            {
                "package": package,
                "severity": severity,
                "vulnerable_version_range": vulnerable_version_range,
                "first_patched_version": first_patched_version,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        package = DependabotAlertPackage.from_dict(d.pop("package"))

        severity = DependabotAlertSecurityVulnerabilitySeverity(d.pop("severity"))

        vulnerable_version_range = d.pop("vulnerable_version_range")

        _first_patched_version = d.pop("first_patched_version")
        first_patched_version: Optional[DependabotAlertSecurityVulnerabilityFirstPatchedVersion]
        if _first_patched_version is None:
            first_patched_version = None
        else:
            first_patched_version = DependabotAlertSecurityVulnerabilityFirstPatchedVersion.from_dict(
                _first_patched_version
            )

        dependabot_alert_security_vulnerability = cls(
            package=package,
            severity=severity,
            vulnerable_version_range=vulnerable_version_range,
            first_patched_version=first_patched_version,
        )

        return dependabot_alert_security_vulnerability
